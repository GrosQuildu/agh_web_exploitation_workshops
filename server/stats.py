#!/usr/bin/env python

from sqlalchemy import create_engine, and_
from sqlalchemy import Column, Integer, String, DateTime, Table, ForeignKey, Sequence
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, backref, aliased
from sqlalchemy.exc import IntegrityError
from sqlalchemy import func
import datetime
from termcolor import colored


PASSWORD = ''
Base = declarative_base()
default_color = '\e[39m'


# --------------- ORM
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
    name = Column(String, unique=True, nullable=False)
    password = Column(String)
    tasks = relationship(
                'Task',
                secondary='solutions',
                back_populates='users'
            )

    def __repr__(self):
        return '{} - {} task solved ({} points)'.format(self.name, len(self.tasks), sum([t.points for t in self.tasks]))


class Task(Base):
    __tablename__ = 'tasks'
    id = Column(Integer, Sequence('task_id_seq'), primary_key=True)
    name = Column(String, unique=True, nullable=False)
    lab_no = Column(Integer, unique=False)
    flag = Column(String)
    points = Column(Integer, default=0)
    users = relationship(
                'User',
                secondary='solutions',
                back_populates='tasks'
            )

    def __repr__(self):
        return '{} ({} points, lab {}) - solved {} times'.format(self.name, self.points, self.lab_no, len(self.users))


class Solution(Base):
    __tablename__ = 'solutions'
    id = Column(Integer, Sequence('solution_id_seq'), primary_key=True)

    user_id = Column(Integer, ForeignKey('users.id'))
    task_id = Column(Integer, ForeignKey('tasks.id'))

    user = relationship(User, backref=backref('solutions', cascade='all, delete-orphan'))
    task = relationship(Task, backref=backref('solutions', cascade='all, delete-orphan'))

    solve_time = Column(DateTime, default=datetime.datetime.utcnow)

    def __repr__(self):
        return '{} ({})'.format(self.user.name, self.solve_time)


# ---------- DB related
def init_engine():
    return create_engine('postgresql://telephoners:{}@localhost:5432/telephoners'.format(PASSWORD))
    # return create_engine('sqlite:///:memory:', echo=False)


def init_session(engine):
    Session = sessionmaker(autocommit=False,autoflush=True)
    Session.configure(bind=engine)
    return Session()


def init_db(engine):
    Base.metadata.create_all(engine)


def test(s):
    register(s, 'u1', 'pu1')
    register(s, 'u2', 'pu2')
    register(s, 'u3', 'pu3')
    register(s, 'sialalala', 'pu4')

    add_task(s, 't1', 1, 'f1', 1)
    add_task(s, 't2', 1, 'f2', 0)
    add_task(s, 't3', 2, 'f3', 5)

    assert solve(s, 'u1', 'pu1', 't1', 'f1')[0] == True
    assert solve(s, 'u1', 'pu1', 't1', 'f1')[0] == False

    assert solve(s, 'u1', 'XXX', 't1', 'f1')[0] == False
    assert solve(s, 'u1', 'pu1', 't1', 'XXX')[0] == False
    assert solve(s, 'u1', 'pu1', 't2', 'f2')[0] == True
    assert solve(s, 'u1', 'pu1', 't3', 'f3')[0] == True

    assert solve(s, 'XXX', 'pu1', 't1', 'f1')[0] == False
    assert solve(s, 'u2', 'pu2', 'XXX', 'f1')[0] == False
    assert solve(s, 'u2', 'pu2', 't1', 'f1')[0] == True
    assert solve(s, 'u3', 'pu3', 't1', 'f1')[0] == True
    assert solve(s, 'sialalala', 'pu4', 't1', 'f1')[0] == True
    assert solve(s, 'u2', 'pu2', 't2', 'f2')[0] == True
    assert solve(s, 'AA', 'BB', 't1', 'f1')[0] == False


# -------- BASIC FUNCTIONS
def register(s,username,password):
    u = User(name=username, password=password)
    try:
        u = s.add(u)
        s.commit()
        return (True, 'User created')
    except IntegrityError as e:
        s.rollback()
        return (False, 'User already exists')


def add_task(s, taskname, lab_no, flag, points):
    t = Task(name=taskname, lab_no=lab_no, flag=flag, points=points)
    try:
        t = s.add(t)
        s.commit()
        return (True, 'Task created')
    except IntegrityError as e:
        s.rollback()
        return (False, 'Task already exists or {}'.format(e))


def solve(s, username, password, taskname, flag):
    u = s.query(User).filter(and_(User.name == username, User.password == password)).first()
    if u is None:
        return (False, 'No such user or wrong password')

    t = s.query(Task).filter(Task.name == taskname).first()
    if t is None:
        return (False, 'No such task')
    if t.flag != flag:
        return (False, 'Wrong flag :(')

    if any([task.name == taskname for task in u.tasks]):
        return (False, 'Already solved')

    u.tasks.append(t)
    return (True, 'Task solved!')


# ----------- FROM MENU
def print_menu():
    print('1) register\n'
             '2) solve task\n'
             '3) list tasks\n'
             '4) show stats\n'
             'exit) done'
    )


def list_tasks(s):
    lab_no = input('gimme lab ([1-5]): ')
    try:
        lab_no = int(lab_no)
        if lab_no < 1 or lab_no > 5:
            throw(Exception)
    except:
        print(colored('wrong number', 'red'))

    for t in s.query(Task).filter(Task.lab_no == lab_no).all():
        print(t)

    return (True, "-----------\nDone")


def try_register(s):
    username = input('gimme username: ')
    password = input('gimme password:  ')
    return register(s, username, password)


def try_solve(s):
    username = input('gimme username: ')
    password = input('gimme password: ')
    taskname = input('gimme taskname: ')
    flag = input('gimme flag: ')

    return solve(s, username, password, taskname, flag)


def try_add_task(s):
    username = input('gimme username: ')
    password = input('gimme password: ')
    
    u = s.query(User).filter(and_(User.name == username, User.password == password)).first()
    if u is None:
        return (False, 'No such user or wrong password')
    if u.name != 'admin':
        return (False, 'Not an admin')

    taskname = input('gimme taskname: ')
    lab_no = int(input('gimme lab_no: '))
    points = int(input('gimme points: '))

    return add_task(s, taskname, lab_no, points)


def show_stats(s):
    print('1) all stats\n'
          '2) task stats')
    i = input('> ').lower()

    if i.startswith('1'):
        for u in s.query(User).all():
            print(u)
    else:
        taskname = input('gimme taskname: ')
        solutions_all = s.query(Solution).filter(Solution.task.has(Task.name == taskname)).order_by(Solution.solve_time.asc()).all()
        if len(solutions_all) > 0:
            print(colored(solutions_all[0].task, 'cyan'))
            for i, sol in enumerate(solutions_all):
                color = 'cyan'
                if i < 3:
                    color = ['green', 'yellow', 'blue'][i]
                print('{}\t->\t{} ({})'.format(i+1, colored(sol.user.name, color), sol.solve_time))
            print('')
        else:
            print(colored('No such task or not solved yet by anyone', 'red'))

    return (True, '--------------------\nDone')


if __name__ == '__main__':
    engine = init_engine()
    s = init_session(engine)

    # init_db(engine)
    # test(s)   

    print('Welcome to the Stats')
    print(colored('~AGH', 'blue'), 'exploitation workshops')  

    logo = ''' 
                        @@@          &@@    | | | @@@ @@@  /////// @@@@@@ @@@@@@                   
                       %@@@@ %@@@@&,@@@@@   | | | @__  |   //, /// @@  @@   @@                     
                       @@@@@@@@@@@@@@@@@@ @_@ |_| __@  |   //,     @@  @@   @@                     
                       @@@@@@@@@@@@@@@@@@                  //,     @@@@@@   @@                     
                       @@@@@@      /@@@@@&            //   //, /// @@  @@   @@                     
                      @@@@@@         @@@@@         ////    //////, @@  @@   @@                     
                   *  @@@@@*         @@@@@       /////                                             
              ,/////, *@@#             @@@  /////////,     //////,*@@  @@ @@@@@@                   
            //// ,///      @@@@@@@@@@*     //////////,       //,  *@@  @@ @@                       
           /////////*  *@@@@@@@@@@@@@@@@&   //////////       //,  *@@  @@ @@                       
            ///////  ,@@@@@@@@@%%@@@@@@@@@&      /////*      //,  *@@@@@@ @@@@@                    
             ,////  &@@@@@@          *@@@@@@       ,////     //,  *@@ ,@@ @@                       
                /, #@@@@@              @@@@@@                //,  *@@  @@ @@@@@@                   
                   @@@@@                @@@@@,                                                     
                   @@@@@                %@@@@%              ,,,,,,  **   ****   **  **             
                   @@@@@                @@@@@*              //////  @@  @@@@@@  @@  @@             
                   @@@@@@              ,@@@@@               //      @@  @@  @@  @@  @@             
                    @@@@@@@                                 //      @@  @@%     @@  @@             
                     #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%       /////   @@  ,@@@@@  @@@@@@             
                       *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     //      @@  @@  @@  @@  @@             
                           ,@@@@@@@@@@@@@@@@@@@@@@@@@@@     //      @@  /@@@@@  @@  @@             
'''

    logo = logo.replace('/', colored('/', 'blue'))
    print(logo)

    cmd = ''
    while True:
        print_menu()
        cmd = input('> ').lower()
        
        if cmd == '1':
            result = try_register(s)
        elif cmd == '2':
            result = try_solve(s)
        elif cmd == '3':
            result = list_tasks(s)
        elif cmd == '4':
            result = show_stats(s)
        elif cmd == '5':
            result = try_add_task(s)
        elif cmd.startswith('exit'):
            break
        else:
            result = (False, 'wrong cmd')

        result, msg = result
        color = 'red'
        if result:
            color = 'green'
        print(colored(msg, color))

