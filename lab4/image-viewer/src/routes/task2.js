var express = require('express');
const request = require('request');
var router = express.Router();

router.get('/', function(req, res, next) {
  res.render('tasks', { title: 'task 2' });
});

router.post('/', function(req, res, next) {
  let url_to_connect = req.body.url;
  let hostname = '';
  // only http and https protocols are allowed
  if (url_to_connect.startsWith("https://")){
    hostname = url_to_connect.substring(8);
  }
  else if (url_to_connect.startsWith("http://")){
    hostname = url_to_connect.substring(7);
  }
  else{
    return res.status(403).send("only http and https protocols are allowed");
  }

  // do not care about the path
  if (hostname.indexOf('/') !== -1){
    hostname = hostname.split('/')[0];
  }
  // do not allow tricks with @
  if (hostname.indexOf("@") !== -1){
    return res.status(403).send("@ is not allowed")
  }
  // do not allow IPv6
  if (hostname.indexOf("::") !== -1){
    return res.status(403).send("ipv6 is not allowed");
  }
  // last value after the : is the port 
  if (hostname.indexOf(":") !== -1){
    hostname = hostname.split(":")[0];
    if (hostname.indexOf(":") !== -1){
      return res.status(403).send("ipv6 is not allowed");
    }
  }
  // only allow domains from trusted websites
  if (hostname.match(/[A-Za-z]/) !== null){
    if (hostname !== "google.com" && hostname !== "imgur.com"){
      return res.status(403).send("domain names are not allowed");
    }
  }
  // disallow different local network addresses
  if (hostname.startsWith("127.") || hostname.startsWith("172.") || hostname.startsWith("192.168") || hostname.startsWith("10")){
    return res.status(403).send("requests to localhost are not allowed");
  }
  // disallow decimal ips
  if( !isNaN(hostname)){
    return res.status(403).send("requests to decimal IPs are not allowed");
  }
  // finally make the request
  // surely we are safe, aren't we?
  request({
    headers: {
      'X-Task': "2"
    },
    uri: url_to_connect,
    method: 'GET'
  }, (err, resp, body) => {
    if (err) { return res.status(403).send('request unsuccessful') }
    res.setHeader('Content-Type', resp.headers['content-type']);
    res.send(body);
  });

});

module.exports = router;
