package main

import (
	"html/template"
	"log"
	"net/http"
	"fmt"
	"os/exec"
	"bytes"
)

type Page struct {
	Request string
	Response string
	ResponseError string
}


func execCmd(cmdStr string, arg string) (string, string, error) {
	var argStr = fmt.Sprintf("ping -c1 %s", arg)
	var argArr = []string{"-c", argStr}
	log.Printf("execCmd: %s %s\n", cmdStr, argArr)

	cmd := exec.Command(cmdStr, argArr...)

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()
	if err != nil {
	    return "", "", err
	}

	outStr, errStr := string(stdout.Bytes()), string(stderr.Bytes())
	return outStr, errStr, nil
}

func runHandler(w http.ResponseWriter, r *http.Request) {
	var paramKey = "pingUrl"
	params, ok := r.URL.Query()[paramKey]
	if !ok || len(params[0]) < 1 {
        log.Printf("Url Param '%s' is missing\n", paramKey)
        var defaultUrl = fmt.Sprintf("/lab3/magic1?%s=%s", paramKey, "1.1.1.1")
        http.Redirect(w, r, defaultUrl, 302)
		return
    }

	outStr, errStr, err := execCmd("bash", params[0])
	var p = &Page{Request: params[0], Response: outStr, ResponseError: errStr}
	if err != nil {
		p.ResponseError += "\n" + err.Error()
	}
	renderTemplate(w, "run", p)
}

var templates = template.Must(template.ParseFiles("run.html"))

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	err := templates.ExecuteTemplate(w, tmpl+".html", p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func makeHandler(fn func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		fn(w, r)
	}
}

func main() {
	fs := http.FileServer(http.Dir("./assets/"))
    http.Handle("/lab3/magic1/assets/", http.StripPrefix("/lab3/magic1/assets/", fs))

	http.HandleFunc("/lab3/magic1", makeHandler(runHandler))

	log.Fatal(http.ListenAndServe(":8080", nil))
}
