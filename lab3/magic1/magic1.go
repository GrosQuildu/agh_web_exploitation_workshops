package main

import (
	"html/template"
	"log"
	"net/http"
	"fmt"
	"os/exec"
	"bytes"
	"context"
	"time"
)

type Page struct {
	Request string
	Response string
	ResponseError string
	UrlBase string
}

func execCmd(cmdStr string, arg string) (string, string, error) {
	var argStr = fmt.Sprintf("ping -c1 '%s'", arg)
	var argArr = []string{"-c", argStr}
	log.Printf("execCmd: %s %s\n", cmdStr, argArr)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	cmd := exec.CommandContext(ctx, cmdStr, argArr...)

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()

	if ctx.Err() == context.DeadlineExceeded {
		return "", "Timeout", nil
	}

	if err != nil {
		return "", string(stderr.Bytes()), err
	}

	outStr, errStr := string(stdout.Bytes()), string(stderr.Bytes())
	return outStr, errStr, nil
}

var urlBase string = "/magic1"
var templates = template.Must(template.ParseFiles("run.html"))

func runHandler(w http.ResponseWriter, r *http.Request) {
	var paramKey = "pingUrl"
	params, ok := r.URL.Query()[paramKey]
	if !ok || len(params[0]) < 1 {
        log.Printf("Url Param '%s' is missing\n", paramKey)
        var defaultUrl = fmt.Sprintf("/magic1?%s=%s", paramKey, "1.1.1.1")
        http.Redirect(w, r, defaultUrl, 302)
		return
    }

	outStr, errStr, err := execCmd("bash", params[0])
	var p = &Page{Request: params[0], Response: outStr, ResponseError: errStr, UrlBase: urlBase}
	if err != nil {
		p.ResponseError += "\n" + err.Error()
	}

	err = templates.ExecuteTemplate(w, "run.html", p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func makeHandler(fn func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		fn(w, r)
	}
}

func main() {
	fs := http.FileServer(http.Dir("./assets/"))
    http.Handle(urlBase + "/assets/", http.StripPrefix(urlBase + "/assets/", fs))

	http.HandleFunc(urlBase, makeHandler(runHandler))

	log.Println("Open http://localhost:7331" + urlBase)
	log.Fatal(http.ListenAndServe(":7331", nil))
}
