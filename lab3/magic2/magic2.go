// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"html/template"
	"log"
	"net/http"
	"fmt"
	"os/exec"
	"bytes"
	"sync"
	"encoding/json"
	"strconv"
	"time"
	"strings"
)

type Page struct {
	Request string
	Response string
	ResponseError string
}

func execCmd(arg string) (string, string, error) {
	blacklist := [...]string{" ", "\\", "$", "`", "\"", ".", "|"}
	for _, element := range blacklist {
	    arg = strings.Replace(arg, element, "", -1)
	}

	var argStr = fmt.Sprintf("date --date='@%s'", arg) + " +\"%H:%S\""
	var argArr = []string{"-c", argStr}
	log.Printf("execCmd: %s\n", argArr)

	cmd := exec.Command("bash", argArr...)

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()
	if err != nil {
	    return "", "", err
	}

	outStr, errStr := string(stdout.Bytes()), string(stderr.Bytes())
	return outStr, errStr, nil
}

func chatHandler(w http.ResponseWriter, r *http.Request) {
	var templates = template.Must(template.ParseFiles("chat.html"))
	err := templates.ExecuteTemplate(w, "chat.html", nil)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func logoHandler(w http.ResponseWriter, r *http.Request) {
	var logo = `
             @@@          &@@    | | | @@@ @@@  /////// @@@@@@ @@@@@@      	
            %@@@@ %@@@@&,@@@@@   | | | @__  |   //, /// @@  @@   @@        	
            @@@@@@@@@@@@@@@@@@ @_@ |_| __@  |   //,     @@  @@   @@        	
            @@@@@@@@@@@@@@@@@@                  //,     @@@@@@   @@        	
            @@@@@@      /@@@@@&            //   //, /// @@  @@   @@        	
           @@@@@@         @@@@@         ////    //////, @@  @@   @@        	
        *  @@@@@*         @@@@@       /////                                	
   ,/////, *@@#             @@@  /////////,     //////,*@@  @@ @@@@@@      	
 //// ,///      @@@@@@@@@@*     //////////,       //,  *@@  @@ @@          	
/////////*  *@@@@@@@@@@@@@@@@&   //////////       //,  *@@  @@ @@          	
 ///////  ,@@@@@@@@@%%@@@@@@@@@&      /////*      //,  *@@@@@@ @@@@@       	
  ,////  &@@@@@@          *@@@@@@       ,////     //,  *@@ ,@@ @@          	
     /, #@@@@@              @@@@@@                //,  *@@  @@ @@@@@@      	
        @@@@@                @@@@@,                                        	
        @@@@@                %@@@@%              ,,,,,,  **   ****   **  **	
        @@@@@                @@@@@*              //////  @@  @@@@@@  @@  @@	
        @@@@@@              ,@@@@@               //      @@  @@  @@  @@  @@	
         @@@@@@@                                 //      @@  @@%     @@  @@	
          #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%       /////   @@  ,@@@@@  @@@@@@	
            *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     //      @@  @@  @@  @@  @@	
                ,@@@@@@@@@@@@@@@@@@@@@@@@@@@     //      @@  /@@@@@  @@  @@

`

    w.Write([]byte(logo))
    return
}

type message struct {
	Nick string
	Date string
	Content string
}

type user struct {
	Nick string
	lastSeen time.Time
}

type appContext struct {
	messages []message
	messagesMux sync.Mutex
	users map[string]user
	usersMux sync.Mutex
}

type appHandler struct {
	*appContext
	H func(*appContext, http.ResponseWriter, *http.Request)
}

func (ah *appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	ah.H(ah.appContext, w, r)
}

func main() {
	fs := http.FileServer(http.Dir("./assets/"))
    http.Handle("/lab3/magic2/assets/", http.StripPrefix("/lab3/magic2/assets/", fs))

    context := &appContext{users: make(map[string]user)}

	http.HandleFunc("/lab3/magic2", chatHandler)
	http.HandleFunc("/lab3/magic2/logo", logoHandler)
	http.Handle("/lab3/magic2/chat/write", &appHandler{context, writeHandler})
	http.Handle("/lab3/magic2/chat/read", &appHandler{context, readHandler})
	http.Handle("/lab3/magic2/chat/users", &appHandler{context, usersHandler})

	log.Fatal(http.ListenAndServe(":8090", nil))
}

func writeHandler(context *appContext, w http.ResponseWriter, r *http.Request) {
	msg, ok := r.URL.Query()["msg"]
	if !ok || len(msg[0]) < 1 {
        http.Redirect(w, r, "Url Param 'msg' is missing", http.StatusNotFound)
		return
    }

    nickStr := "+guest0"
    nick, ok := r.URL.Query()["nick"]
	if ok && len(msg[0]) >= 1 {
        nickStr = nick[0]
    }

	currentTime := ""
    dateStr := ""
    currentDate, ok := r.URL.Query()["date"]
	if ok && len(currentDate[0]) >= 1 {
        dateStr = currentDate[0]
        currentTimeOutput, _, err := execCmd(dateStr)
        currentTimeOutput = strings.TrimSpace(currentTimeOutput)
        if err == nil {
        	currentTime = currentTimeOutput
        }
    }

    if currentTime == "" {
    	hours, minutes, _ := time.Now().Clock()
    	currentTime = fmt.Sprintf("%02d:%02d", hours, minutes)
    }

    newMsg := message{Content: msg[0], Nick: nickStr, Date: currentTime}

    context.messagesMux.Lock()
    context.messages = append(context.messages, newMsg)
    context.messagesMux.Unlock()

    context.usersMux.Lock()
    userFound, userExists := context.users[nickStr]
    if userExists {
    	userFound.lastSeen = time.Now()
    } else {
    	context.users[nickStr] = user{Nick: nickStr, lastSeen: time.Now()}
    }
    context.usersMux.Unlock()

    w.WriteHeader(200)
    w.Write([]byte("OK"))
    return
}

func readHandler(context *appContext, w http.ResponseWriter, r *http.Request) {
	var offsetInt uint64 = 0
	offset, ok := r.URL.Query()["offset"]
	if ok && len(offset[0]) >= 1 {
		var err error
		offsetInt, err = strconv.ParseUint(offset[0], 10, 64)
		if err != nil {
			w.Write([]byte(err.Error()))
			w.WriteHeader(http.StatusInternalServerError)
		    return
		}	        
    }

    messagesToReturn := []byte("[]")
    var err error

    context.messagesMux.Lock()
    if offsetInt < uint64(len(context.messages)) {
    	messagesToReturn, err = json.Marshal(context.messages[offsetInt:])
    }
	context.messagesMux.Unlock()

    if err != nil {
    	w.Write([]byte(err.Error()))
        w.WriteHeader(http.StatusInternalServerError)
        return
    }

	w.Write(messagesToReturn)
	return
}

func usersHandler(context *appContext, w http.ResponseWriter, r *http.Request) {
	users := []user{user{Nick:"@kisukjD"}, user{Nick:"@sroG"}, user{Nick:"@guonS"}}

	context.usersMux.Lock()
	currentTime := time.Now()
	for nick, user := range context.users {
		if currentTime.Sub(user.lastSeen).Seconds() > 30 {
			delete(context.users, nick)
		} else {
			users = append(users, user)
		}
    }

	usersToReturn, err := json.Marshal(users)
	context.usersMux.Unlock()
	if err != nil {
    	w.Write([]byte(err.Error()))
        w.WriteHeader(http.StatusInternalServerError)
        return
    }

	w.Write(usersToReturn)
	return
}