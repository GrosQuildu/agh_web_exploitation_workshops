// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"html/template"
	"log"
	"net/http"
	"fmt"
	"os/exec"
	"bytes"
)

type Page struct {
	Request string
	Response string
	ResponseError string
}

func execCmd(cmdStr string, arg string) (string, string, error) {
	var argStr = fmt.Sprintf("ping -c1 %s", arg)
	var argArr = []string{"-c", argStr}
	log.Printf("execCmd: %s %s\n", cmdStr, argArr)

	cmd := exec.Command(cmdStr, argArr...)

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()
	if err != nil {
	    return "", "", err
	}

	outStr, errStr := string(stdout.Bytes()), string(stderr.Bytes())
	return outStr, errStr, nil
}

func chatHandler(w http.ResponseWriter, r *http.Request) {
	var templates = template.Must(template.ParseFiles("chat.html"))
	err := templates.ExecuteTemplate(w, "chat.html", nil)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func writeHandler(w http.ResponseWriter, r *http.Request) {
	msg, ok := r.URL.Query()["msg"]
	if !ok || len(msg[0]) < 1 {
        log.Print("Url Param 'msg' is missing\n")
        http.Redirect(w, r, "/lab3/magic2", http.StatusNotFound)
		return
    }
    var msgStr = msg[0];

    fmt.Println(msg);
    // lock file
    // write to file
    // unlock file
    // response
}

func readHandler(w http.ResponseWriter, r *http.Request) {
	http.Redirect(w, r, "", http.StatusNotFound)
	return
    // soft lock file
    // read file
    // unlock file
    // response
}

func logoHandler(w http.ResponseWriter, r *http.Request) {
	var logo = `
             @@@          &@@    | | | @@@ @@@  /////// @@@@@@ @@@@@@      	
            %@@@@ %@@@@&,@@@@@   | | | @__  |   //, /// @@  @@   @@        	
            @@@@@@@@@@@@@@@@@@ @_@ |_| __@  |   //,     @@  @@   @@        	
            @@@@@@@@@@@@@@@@@@                  //,     @@@@@@   @@        	
            @@@@@@      /@@@@@&            //   //, /// @@  @@   @@        	
           @@@@@@         @@@@@         ////    //////, @@  @@   @@        	
        *  @@@@@*         @@@@@       /////                                	
   ,/////, *@@#             @@@  /////////,     //////,*@@  @@ @@@@@@      	
 //// ,///      @@@@@@@@@@*     //////////,       //,  *@@  @@ @@          	
/////////*  *@@@@@@@@@@@@@@@@&   //////////       //,  *@@  @@ @@          	
 ///////  ,@@@@@@@@@%%@@@@@@@@@&      /////*      //,  *@@@@@@ @@@@@       	
  ,////  &@@@@@@          *@@@@@@       ,////     //,  *@@ ,@@ @@          	
     /, #@@@@@              @@@@@@                //,  *@@  @@ @@@@@@      	
        @@@@@                @@@@@,                                        	
        @@@@@                %@@@@%              ,,,,,,  **   ****   **  **	
        @@@@@                @@@@@*              //////  @@  @@@@@@  @@  @@	
        @@@@@@              ,@@@@@               //      @@  @@  @@  @@  @@	
         @@@@@@@                                 //      @@  @@%     @@  @@	
          #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%       /////   @@  ,@@@@@  @@@@@@	
            *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     //      @@  @@  @@  @@  @@	
                ,@@@@@@@@@@@@@@@@@@@@@@@@@@@     //      @@  /@@@@@  @@  @@

`

    w.Write([]byte(logo))
    return
}

func main() {
	fs := http.FileServer(http.Dir("./assets/"))
    http.Handle("/lab3/magic2/assets/", http.StripPrefix("/lab3/magic2/assets/", fs))

	http.HandleFunc("/lab3/magic2", chatHandler)
	http.HandleFunc("/lab3/magic2/logo", logoHandler)
	http.HandleFunc("/lab3/magic2/chat/write", writeHandler)
	http.HandleFunc("/lab3/magic2/chat/read", readHandler)

	log.Fatal(http.ListenAndServe(":8090", nil))
}
